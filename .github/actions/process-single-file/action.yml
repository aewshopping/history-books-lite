# .github/actions/process-single-file/action.yml
name: 'Process Single Data File with Miller'
description: 'Downloads a data file, deletes specified columns using Miller, and cleans up.'

inputs:
  file_url:
    description: 'The URL of the remote input data file.'
    required: true
  output_filename:
    description: 'The desired local output filename for the processed file.'
    required: true
  columns_to_delete:
    description: 'Comma-separated string of column names to delete (e.g., "Col1,Col2"). Can be empty.'
    required: true
  miller_format:
    description: 'Miller format flags (e.g., --csv, --tsv, --json).'
    required: true

outputs:
  processed_filepath:
    description: "The path to the processed output file."
    value: ${{ inputs.output_filename }} # Expose the output filename

runs:
  using: "composite"
  steps:
    - name: Download, Process, and Clean Up
      run: |
        set -eo pipefail # Exit immediately if a command exits with a non-zero status; also fails if any command in a pipeline fails.

        echo "--- Processing: ${{ inputs.file_url }} ---"
        echo "Output filename: ${{ inputs.output_filename }}"
        echo "Columns to delete: [${{ inputs.columns_to_delete }}]"
        echo "Miller format flags: ${{ inputs.miller_format }}"

        # Use mktemp to create a unique temporary file name without a specific suffix.
        # This simplifies the code as requested.
        TEMP_INPUT_FILE=$(mktemp) # <<< SIMPLIFIED HERE: Removed --suffix logic
        echo "Created temporary file: $TEMP_INPUT_FILE"

        # Ensure the temporary file is removed even if the script fails
        trap "rm -f \"$TEMP_INPUT_FILE\"" EXIT

        # 1. Download the file
        echo "Downloading ${{ inputs.file_url }} to $TEMP_INPUT_FILE..."
        curl --output "$TEMP_INPUT_FILE" "${{ inputs.file_url }}"

        echo "Downloaded $TEMP_INPUT_FILE head:"
        head "$TEMP_INPUT_FILE"

        # 2. Delete unwanted columns using Miller
        echo "Processing $TEMP_INPUT_FILE with Miller..."
        if [ -n "${{ inputs.columns_to_delete }}" ]; then
          mlr ${{ inputs.miller_format }} cut --exclude --fields "${{ inputs.columns_to_delete }}" "$TEMP_INPUT_FILE" > "${{ inputs.output_filename }}"
        else
          echo "No columns specified for deletion. Copying original to output."
          cp "$TEMP_INPUT_FILE" "${{ inputs.output_filename }}"
        fi

        # Check for successful output file creation
        if [ ! -f "${{ inputs.output_filename }}" ]; then
          echo "Error: Processed file '${{ inputs.output_filename }}' was not created."
          exit 1
        fi
        echo "Processed ${{ inputs.output_filename }} head:"
        head "${{ inputs.output_filename }}"

        # The 'trap' command above handles the cleanup of $TEMP_INPUT_FILE automatically

        echo "--- Finished processing ${{ inputs.output_filename }} ---"
        echo ""

      shell: bash
